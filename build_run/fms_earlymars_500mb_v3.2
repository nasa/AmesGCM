#!/bin/csh -f

#**************************************************************************************************
# ========================================= PBS Settings ==========================================
#**************************************************************************************************

#PBS -S /bin/csh
#PBS -q long
#PBS -j oe
#PBS -l select=3:ncpus=28:model=bro
#PBS -l walltime=12:00:00
#PBS -W group_list=s????
#PBS -M user@email.com
#PBS -m abe

#**************************************************************************************************
# ====================================== Execution Variables  =====================================
#**************************************************************************************************
set name = fms_earlymars_500mb_v3.2
set scriptname = $cwd/$name
set classdir = am4_earlymars_runs
set workdir = /nobackup/$USER/FMS_MARS_runs/$classdir/$name # Where model is run, output stored
set datadir = $cwd/../src/AmesGCM/data
echo "Datadir =" $datadir

set platform = intel    # Your platform
set TILE_LAYOUT = 3,4   # 6 * layout 1 * layout 2 <= total requested cpus (select*ncpus)
set model_executable = $cwd/exec.$platform.mars3.2/FMS_MARS.x           # Path to model
set homedir = $cwd

set NCX = 24        # Number of horizontal grid cells per cube face column or row
set PREF = 5.0e4    # Reference surface pressure (Pa)
set DTA = 231       # Atmospheric time step
set NKS = 1         # Number of vertical remapping per time step
set NNS = 4         # Number of advective steps per k
set NPZ = 56        # Number of vertical layers
set NPZ_RST = 0     # Resolution in restart file

#**************************************************************************************************
# ========================================== Time Setup  ==========================================
#**************************************************************************************************

#------ Tells model how long to run. Default = (668 668) is 2 years, 1 year per output file
set dayslist = ( 668 668 )      # Number of days per execution.
set num_executions = $#dayslist # Number of executions. Each run restarts from previous run.

#------ Define the run type:
#       RUNTYPE = 0 for COLD start
#       RUNTYPE = 1 for CONTINUATION warm start
#       RUNTYPE = 2 for WARM start from file. Use full path including file
set RUNTYPE = 0
set restartfile = /nobackup/$USER/FMS_MARS_runs/$classdir/$name/restart/01336.restart.tar

#**************************************************************************************************
# ================================= Prepare Initial Conditions  ===================================
#**************************************************************************************************

#------ Options for editing initial condition fields:
set RESET_DATE = 0
set USE_SURFACE_MAPS = 0

#------ Define a list of dust scenarios to use. Each execution will cycle to the next file, then
#       loop back to the first:
set dust_scenarios = ( DustScenario_Background.nc )

#------ Add personalized variables to diag_table.ext and add them here:
set APPEND_EXTERNAL_DIAGTABLE = 0
set diagtable_ext = $homedir/diag_table.ext

#------ Load the appropriate modules for Pleiades:
source $cwd/../bin/loadmods.csh

#**************************************************************************************************
# =================================== Set Up Directory Structure ==================================
#**************************************************************************************************

#------ Fresh start, clean the dir, just in case
if( $RUNTYPE == 0 ) then
    rm -rf $workdir
    mkdir -p $workdir
    cd $workdir
    mkdir -p INPUT RESTART history restart ascii
    set initCond = ''
else if ( $RUNTYPE == 1) then
    if ( -d $workdir ) then
        cd $workdir
        mkdir -p INPUT RESTART history restart ascii
    else
        echo 'Problem with workdir' $workdir 'in runscript'
        exit 1
    endif
    set initCond = ''
else if ( $RUNTYPE == 2 ) then
    rm -rf $workdir
    mkdir -p $workdir
    cd $workdir
    mkdir -p INPUT RESTART history restart ascii
    cp -r $restartfile $workdir/restart/
    set restart_name = `basename $restartfile` # Get basename (without the path)
    set initCond = $workdir/restart/$restart_name
else
    echo 'Problem with RUNTYPE in runscript'
    exit 1
endif

#------ Copy this script to RESTART:
cp $scriptname RESTART/$name

#------ Get executable *.x put it in workdir:
cp $model_executable .

#------ Switch back to workdir and set up the diag_table and the namelist input:
cd $workdir
/bin/rm diag_table field_table tagging_table input.nml.unexpanded

#**************************************************************************************************
# =================================== Automated settings ==========================================
#**************************************************************************************************
set pes = `echo ${TILE_LAYOUT} | tr "," "\n"`
set npes = `expr 6 \* $pes[1] \* $pes[2]` # Number of processors required. (Req. select*ncpus >= npes)
set NPX = `expr ${NCX} + 1` # Number of grid boundaries per column or row = NCX+1
set NORD = 3
if ( $NPX > 80 ) then
    set NORD = 1
else if ( $NPX > 40 ) then
    set NORD = 2
endif

#**************************************************************************************************
# ========================= Set Up Inline and External Diag Tables ================================
#**************************************************************************************************

cat > diag_table <<EOF
$name
0 0 0 0 0 0
# Define the output files
"grid_spec",     -1, "hours",  1, "days", "time",
"fixed",         -1, "days",   1, "days", "time",
"atmos_daily",    2, "hours",  1, "days", "time",
"atmos_average",  5, "days",   1, "days", "time",
"atmos_diurn",    5, "days",   1, "days", "time",
"atmos_davg",     1, "days",   1, "days", "time",

#------ Format of each column in the diag table:
# module_name, field_name, output_name, file_name, time_sampling, time_method, spatial_ops, pack
#   -> time_method = .true. (for time average), max, min, or diurnal24
#   -> spatial_ops = none (if global field), or "lonmin lonmax latmin latmax presmin presmax"
#       for regional output (pressure in mb)
#*********************************************************************************************
#                               -------   grid_spec  ----------
#*********************************************************************************************
"dynamics",     "grid_lon",     "grid_lon",     "grid_spec",    "all", .false.,      "none", 2,
"dynamics",     "grid_lat",     "grid_lat",     "grid_spec",    "all", .false.,      "none", 2,
#*********************************************************************************************
#                               -------     fixed     ----------
#*********************************************************************************************
"dynamics",     "bk",           "bk",           "fixed",        "all", .false.,      "none", 2,
"dynamics",     "pk",           "ak",           "fixed",        "all", .false.,      "none", 2,
"dynamics",     "zsurf",        "zsurf",        "fixed",        "all", .false.,      "none", 2,
"mars_surface", "thin0",        "thin",         "fixed",        "all", .false.,      "none", 2,
"mars_surface", "alb0",         "alb",          "fixed",        "all", .false.,      "none", 2,
"mars_surface", "emiss0",       "emis",         "fixed",        "all", .false.,      "none", 2,
"mars_surface", "gice0",        "gice",         "fixed",        "all", .false.,      "none", 2,
#*********************************************************************************************
#                               -------  atmos_average  ----------
#*********************************************************************************************
"dynamics",     "bk",           "bk",           "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "pk",           "ak",           "atmos_average", "all", .true.,      "none", 2,
"radiation",    "areo",         "areo",         "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "ps",           "ps",           "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "ucomp",        "ucomp",        "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "vcomp",        "vcomp",        "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "temp",         "temp",         "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "ukd",          "ukd",          "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "vkd",          "vkd",          "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "tkd",          "tkd",          "atmos_average", "all", .true.,      "none", 2,
"mars_physics", "stress",       "stress",       "atmos_average", "all", .true.,      "none", 2,
"mars_surface", "snow",         "co2ice_sfc",   "atmos_average", "all", .true.,      "none", 2,
"mars_physics", "precip",       "precip",       "atmos_average", "all", .true.,      "none", 2,
"mars_surface", "ts",           "ts",           "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "t05",          "t05",          "atmos_average", "all", .true.,      "none", 2,
"radiation",    "taudust_VIS",  "taudust_VIS",  "atmos_average", "all", .true.,      "none", 2,
"radiation",    "dustref",      "dustref",      "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "dst_mass_mom", "dst_mass_mom", "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "dst_num_mom",  "dst_num_mom",  "atmos_average", "all", .true.,      "none", 2,
"dust_source",  "dst_mass_mom_source","dst_mass_source", "atmos_average","all",.true.,"none", 2,
"dust_source",  "dst_mass_mom_sink",  "dst_mass_sink",   "atmos_average","all",.true.,"none", 2,
"dust_source",  "dst_mass_mom_col",   "dst_mass_mom_col","atmos_average","all",.true.,"none", 2,
"sedim",        "dst_mass_mom_dep",   "dst_mass_dep",    "atmos_average","all",.true.,"none", 2,
"sedim",        "dst_num_mom_dep",    "dst_num_dep",     "atmos_average","all",.true.,"none", 2,
"mars_physics", "delz",         "delz",         "atmos_average", "all", .true.,      "none", 2,
"dynamics",     "delp",         "delp",         "atmos_average", "all", .true.,      "none", 2,
#*********************************************************************************************
#                               -------  atmos_daily  ----------
#*********************************************************************************************
"dynamics",      "bk",           "bk",           "atmos_daily",   "all", .false.,     "none", 2,
"dynamics",      "pk",           "ak",           "atmos_daily",   "all", .false.,     "none", 2,
"radiation",     "areo",         "areo",         "atmos_daily",   "all", .false.,     "none", 2,
"mars_surface",  "ts",           "ts",           "atmos_daily",   "all", .false.,     "none", 2,
"dynamics",      "ps",           "ps",           "atmos_daily",   "all", .false.,     "none", 2,
#"mars_physics", "delz",         "delz",         "atmos_daily",   "all", .false.,      "none", 2,
#"dynamics",     "delp",         "delp",         "atmos_daily",   "all", .false.,      "none", 2,
#*********************************************************************************************
#                               -------  atmos_diurn ----------
#*********************************************************************************************
"dynamics",     "bk",           "bk",           "atmos_diurn",   "all", "diurnal24", "none", 2,
"dynamics",     "pk",           "ak",           "atmos_diurn",   "all", "diurnal24", "none", 2,
"radiation",    "areo",         "areo",         "atmos_diurn",   "all", "diurnal24", "none", 2,
"dynamics",     "ps",           "ps",           "atmos_diurn",   "all", "diurnal24", "none", 2,
"mars_surface"  "ts",           "ts",           "atmos_diurn",   "all", "diurnal24", "none", 2,
#"dynamics",    "temp",         "temp",         "atmos_diurn",   "all", "diurnal24",  "none", 2,
#"mars_physics","delz",         "delz",         "atmos_diurn",   "all", "diurnal24", "none", 2,
#"dynamics",    "delp",         "delp",         "atmos_diurn",   "all", "diurnal24", "none", 2,
#*********************************************************************************************
#                               -------  atmos_davg  ----------
#*********************************************************************************************
"dynamics",     "bk",           "bk",           "atmos_davg",    "all", .true.,      "none", 2,
"dynamics",     "pk",           "ak",           "atmos_davg",    "all", .true.,      "none", 2,
"radiation",    "areo",         "areo",         "atmos_davg",    "all", .true.,      "none", 2,
"dynamics",     "ps",           "ps",           "atmos_davg",    "all", .true.,      "none", 2,
"mars_surface", "ts",           "ts",           "atmos_davg",    "all", .true.,      "none", 2,
#"mars_physics", "delz",         "delz",         "atmos_davg",    "all", .true.,      "none", 2,
#"dynamics",     "delp",         "delp",         "atmos_davg",    "all", .true.,      "none", 2,

EOF

#**************************************************************************************************
# ====================================== In-line Field Table  =====================================
#**************************************************************************************************

cat > field_table <<EOF
"TRACER", "atmos_mod",    "dummy_tracer"
          "longname",     "dummy tracer to bypass moist adjustments in dycore"
          "units",        "kg/kg"
          "type2",        "gas"
          "profile_type", "fixed",      "surface_value = 0.0" /

"TRACER", "atmos_mod",    "h2o_vapor"
          "longname",     "specific humidity"
          "units",        "kg/kg"
          "type2",        "gas"
          "profile_type", "fixed",      "surface_value = 0.0" /

"TRACER", "atmos_mod",    "tracer1"
          "longname",     "dust_tracer"
          "units",        "none"
          "aerosol",      "dust_bin",   "radius = 0.3",
          "dust_src",     "fixed",      "assim_source_wgt = 0.05",
          "tracer_src",   "stress_lifting_amp = 0.5",
          "radtype",      "radval = 1",
          "optics",       "qext = 0.98",
          "profile_type", "fixed",      "surface_value = 0.0" /

"TRACER", "atmos_mod",    "dst_mass_mom"
          "longname",     "dust_mass"
          "units",        "none"
          "type",         "microphys"
          "profile_type", "fixed",      "surface_value = 0.0" /

"TRACER", "atmos_mod",    "dst_num_mom"
          "longname",     "dust_number"
          "units",        "none"
          "type",         "microphys"
          "profile_type", "fixed",      "surface_value = 0.0" /

"TRACER", "atmos_mod",    "ice_mass_mom"
          "longname",     "ice_mass"
          "units",        "none"
          "type",         "microphys"
          "profile_type", "fixed",      "surface_value = 0.0" /

"TRACER", "atmos_mod",    "ice_num_mom"
          "longname",     "ice_number"
          "units",        "none"
          "type",         "microphys"
          "profile_type", "fixed",      "surface_value = 0.0" /

"TRACER", "atmos_mod",    "cor_mass_mom"
          "longname",     "dust_core_mass"
          "units",        "none"
          "type",         "microphys"
          "profile_type", "fixed",      "surface_value = 0.0" /

"TRACER", "atmos_mod",    "vap_mass_mom"
          "longname",     "vapor_mass"
          "units",        "none"
          "type",         "microphys"
          "type2",        "gas"
          "profile_type", "fixed",      "surface_value = 0.0" /

"TRACER", "atmos_mod",    "ice_cloud"
          "longname",     "ice_mass_bin"
          "units",        "none",
          "aerosol",      "ice_bin",    "radius = 4.0",
          "tracer_src",   "stress_lifting_amp = 0.5",
          "radtype",      "radval = 1",
          "optics",       "qext = 0.98" /
EOF

cat > input.nml.unexpanded <<\EOF

!**************************************************************************************************
! ======================================== Model Namelists ========================================
!**************************************************************************************************

 &fv_core_nml
    layout = $TILE_LAYOUT       ! Layout of processor: total cpu core = 6*layout1*layout2
    reference_sfc_pres = $PREF, ! Reference sfc pressure for nominal vertical grid in output [Pa]
    p_ref = $PREF,              ! Reference sfc pressure [Pa] used to define vertical grid aks
    dry_mass = $PREF,           ! Initial co2 mass [Pa]
    npx = $NPX,                 ! Number of cell boundaries per tile, x-direction. Resolution is ~360/4*22
    npy = $NPX,                 ! Number of cell boundaries per tile, y-direction. Resolution is ~360/4*22
    npz = $NPZ,                 ! Number of vertical layers to use; tabulates ak, bk values specified
                                !   in FV_eta.F90
    npz_rst = $NPZ_RST          ! If nonzero, specifies number of vertical layers in the restart file.
                                !   Default = 0
    ntiles= 6,                  ! Number of tiles that make up the globe. Default = 6
    k_split = $NKS,             ! Frequency (per timestep [DTA; dt_atmos]) of vertical remapping.
                                !   Double if resolution is doubled
    n_split = $NNS,             ! Frequency (per k_split) of advective timestep
    fill = T,                   ! FLAG: Fill negative tracers
    n_sponge = 0,               ! Number of dynamic sponge layers
    d2_bg_k1 = 0.2,             ! Sponge layer del-2 divergence factor 1
    d2_bg_k2 = 0.04,            ! Sponge layer del-2 divergence factor 2
    nord = $NORD,               ! Divergence damping order (3 is del-8).
                                !   = 3 for c24
                                !   = 2 for c48
                                !   = 1 for c96+
    d4_bg = 0.15,               ! Coefficient for background del-4(6) divergence damping
    d_ext = 0.00,               ! Coefficient for external (barotropic) mode damping. Default is 0.02
    print_freq = -1,            ! Frequency for the diagnostics integral in the ascii output files
    beta = 0.2,                 ! Bluntness of topographic features
    kord_tm = -10,              ! Controls the order of the advection scheme for various variables
    kord_mt = 10,               ! Vertical mapping option for U, V
    kord_wz = 10,               ! Vertical mapping option for W
    kord_tr = 10,               ! Vertical mapping option for tracers
    hord_mt = 10,               ! Horizontal transport option for U, V
    hord_tm = 10,               ! Horizontal transport option for T
    hord_vt = 10,               ! Horizontal transport option for vort
    hord_dp = 10,               ! Horizontal transport option for delp
    nwat = 0,                   ! Number of water constituents
/

 &main_nml
    days = $days,       ! Number of days to simulate in this run (set using dayslist)
    dt_atmos = $DTA     ! Physics timestep [sec]. Use integer sec between 2 timesteps.
                        !   Dynamical timestep then = dt_atmos/(nsplit * ksplit)
/

 &orbital_data_nml
    obliquity = 25.19,          ! Planet obliquity [deg]
    eccentricity = 0.0,         ! Planet eccentricity
    solar_constant = 438.0864,  ! Avg solar constant at top of atmosphere of semimajor axis at Mars [W/m^2]
/

 &surface_data_nml
    do_co2_condensation = T,    ! FLAG: CO2 condensation at sfc. Maintains sfc T at or above Tcrit
    do_subsfc_ice = F,          ! FLAG: Include subsurface ice effect on thermal diffusivity
    soil_ti = 250.0,            ! Default surface thermal inertia [J m-2 K-1 s-0.5], used only if no input file is provided
    soil_alb = 0.2,             ! Nominal background surface albedo [mks], used only if no input file is provided
    albedo_ice_np = 0.5,        ! Northern CO2 surface ice albedo
    albedo_ice_sp = 0.5,        ! Southern CO2 surface ice albedo
    emiss_ice_np = 0.85,        ! Northern CO2 surface ice emissivity
    emiss_ice_sp = 0.85,        ! Southern CO2 surface ice emissivity
    soil_temp = 220.,           ! Isothermal initialization soil temperature [K]. Must be > 0. Used only if no input file is provided
    use_legacy_soil = T,        ! FLAG: Use legacy soil rho cp values
    alpha = 0.0,                ! Defines surface temperature calculation (0 = fully explicit, 0.5 = semi-implicit, 1.0 = fully implicit)

/

 &mars_iso_nml
    isotemp = 220.,             ! Isothermal initialization temperature [K]
/

!**************************************************************************************************
! ======================================== Physics Namelists ======================================
!**************************************************************************************************

 &mars_physics_nml
    do_co2_condensation_cycle = T,          ! FLAG: Do mass feedback from CO2 condensation (atm+srf)
    do_co2_condensation = T,                ! FLAG: CO2 condensation T adjustment in the atmosphere,
                                            !   deposited at sfc. Allows latent heating to be toggled.
                                            !   CO2 cycle controlled by 3 variables; 2 in mars_physics.
                                            !   If do_co2_condesnation_cycle = F, CO2 cap formation still
                                            !   allowed, it influences T and albedos, but mass source/sink
                                            !   does not affect the pressure cycle.
    GW_drag_TOG = 0,                        ! Toggle for gravity wave drag
                                            !   = 0 for none
                                            !   = 1 for Palmer orographic gravity waves
                                            !   = 2 for Alexander and Dunkerton non-orographic waves
    do_conserve_energy = T,                 ! FLAG: adjust temperature according to wind drag
    rayleighModelTop_flag = T,              ! FLAG: apply Rayleigh damping near the top of the model boundary
    rayleighModelTop_pres_cutoff = 125.,    ! Set Rayleigh damping to zero below this level (Pa)
    rayleighModelTop_pres_inflex = 13.,     ! Raleigh damping inflection pressure level (Pa)

/

&ames_pblmod_nml
    htflux_recalc = T,  ! FLAG: If true, calculate heat flux at the end of newpbl with updated temperature
/

!**************************************************************************************************
! ======================================= Aerosols Namelists ======================================
!**************************************************************************************************

 &aerosol_util_nml
    do_15band = T,          ! FLAG: T = use 15 band radiation for aerosol optics. F = 12 band. MUST match rtmod flag
    do_moment_dust = F,     ! FLAG: Do dust moment microphysics

/

 &aerosol_nml
    do_inpt_dust_cycle = T, ! FLAG: Read dust scenario from an input file for lifting. Skipped if optical_depth_inpt <= 0.
    conrath_type = 0,       ! Conrath vertical extent.
                            !   0 = Conventional Conrath top
                            !   1 = Conrath with scaled ztop
/

 &dust_update_nml
    Background = T,         ! FLAG: Background dust mode
    interact = F,           ! FLAG: Interactive Dust Mode
/

!**************************************************************************************************
! ==================================== Gravity Wave Drag Namelists ================================
!**************************************************************************************************

 &palmer_drag_nml
    grid_res = $NCX,        ! Closest grid resolution for the topography standard deviation
/

!**************************************************************************************************
! =================================== Radiative Transfer Namelists ================================
!**************************************************************************************************

 &radiation_driver_nml
    rad_calc_intv = 462,    ! Radiation calculation time step [s]
/

 &ames_rtmod_nml
    radactive_dust_TOG = 0,     ! Toggle for radiatively active dust
                                !   = 0 for clear
                                !   = 1 transported moment dust (defined by dust_update_nml flags)
                                !   = 2 not supported
                                !   = 3 prescribed fixed (defined by aerosol_nml flags)
    use_extended_cor_ks = T,    ! FLAG: Extended temperature range and CO2 line widths appropriate for higher pressures
    ames_15band = T,            ! FLAG: Use 15-band aerosol optics. If =F, use 12 band. Must match aerosol_util_nml flag
    use_boxinterp12 = F,        ! Flag: Use boxinterp for k-coef interpolation with 12-band. Cannot be used with 15-band.
    do_cia = T,                 ! FLAG: account for collision induced absorption (CIA) opacity
    cia_co2 = 0.95,             ! Molar concentration of CO2 for CIA (value between 0 and 1)
    cia_h2 = 0.0,               ! Molar concentration of H2 for CIA (value between 0 and 1)
    do_irflux_scale = T,        ! FLAG: Scale to set upward ir flux equal to sigmaT4
    scale_by_scon = T,          ! FLAG: scale the solar flux by solar constant namelist variable in astronomy
/

!**************************************************************************************************
! =================================== FV3 Internal Namelists ======================================
!**************************************************************************************************

 &fms_nml
    clock_grain = "LOOP",           ! Performance timer, default = loop level
    domains_stack_size = 4194304,   ! Number of words of MPP_DOMAINS user stack
    print_memory_usage = T,         ! Prints memory usage stats to the fms.out file
/

 &diag_manager_nml
    issue_oor_warnings = F,         ! FLAG: print out warning when zonal wind, meridional wind, or atmospheric temperature are outside of the range set in FV_diagnostics
/

 &test_case_nml
    test_case = 10                  ! Topography type. 11 = Mars topo; 10 = flat topo
/

\EOF

#**************************************************************************************************
# ======================== Ready to Begin Loop Execution Over Run Cycles  =========================
#**************************************************************************************************

#------ Copy the INPUT dir to see its state at the very first call:
if( $RUNTYPE == 0 ) then
   rm -rf $workdir/INPUT_cold
   cp -r $workdir/INPUT $workdir/INPUT_cold
endif

#------ Set path to timestamp.csh:
set time_stamp = $homedir/../bin/time_stamp.csh
echo "time_stamp =" $time_stamp

#------ Directory names for data archival on LFE:
set LHOME = /u/$USER
set LRUN = $LHOME/FV3/xanadu/$classdir/$name
set HIST_DIR = $LRUN/history
set RESTART_DIR = $LRUN/restart
set ASCII_DIR = $LRUN/ascii

#------ The following supports expansion of namelist file (input.nml) contained cshell vars
#------ Convert into fully resolved namelist:
set expandVariables = $homedir/../src/FRE-bronx/sbin/expand_variables
set FRE_JOBID = $0:t.o`date +%s`
set -r envFile = /tmp/shell.variables.$FRE_JOBID
set -r envFileDelay = 2

#------ Get boundary Data (topo, albedo, TI dust scenario etc), copy to INPUT:
cd $workdir/INPUT

#------ Copy files for radiation:
cp $datadir/CO2H2O_* .
cp $datadir/*100_800.dat .
cp $datadir/waterCoated_vis_* .
cp $datadir/waterCoated_ir_* .
cp $datadir/Dust_vis_wolff2010_* .
cp $datadir/Dust_ir_wolff2010_* .

cp $datadir/QabsFCorrect.dat .

cp $datadir/DustQ_Tbright_MK.dat                DustQ_Tbright_MK.dat
cp $datadir/waterCoatedQ_Tbright_MK.dat         waterCoatedQ_Tbright_MK.dat

cp $datadir/palmer_drag_input_c24_c48_c96.nc .

#------ Copy hi-res topography, TI, albedo, and surface emissivity:
cp $datadir/mars_topo_mola16.nc                 mars_topo.nc

if ( $USE_SURFACE_MAPS )  then
    cp $datadir/mars_thermal_inertia8_2011.nc   thermal_inertia.nc
    cp $datadir/mars_TES_albedo8_new.nc         albedo.nc
    cp $datadir/mars_sfc_emissivity8.nc         sfc_emiss.nc
endif

cp $datadir/GRS_interp16.nc                     GRS_interp16.nc
cp $datadir/npcflag8.nc                         npcflag8.nc

#------ Copy specified restart file to INPUTif requesting a warm start:
if ( $RUNTYPE == 2 ) then
    # Test file existence first
    if ( -f $initCond ) then
        tar -xf $initCond
        echo "tar done in" $initCond
    else
       echo $restartfile 'does not exist, ABORTING RUN'
       exit 1
    endif
else
    /bin/rm INPUT/*.res INPUT/*.res.nc INPUT/*.res.nc.0??? INPUT/*.res.tile?.nc INPUT/*.res.tile?.nc.0???
endif

#**************************************************************************************************
# =========================== Operations on the Initial Conditions ================================
#**************************************************************************************************

#------ Below is an example of resetting the model day number to XX:
if ( $RESET_DATE ) then
/bin/rm -f atmos_model.res
cat >> atmos_model.res <<EOF
     0     0   000     0     0     0        Current model time: year, month, day, hour, minute, second
EOF
endif

#------ Eliminate restart files with old vertical level dependencies:
if( $NPZ_RST != 0 ) then
    echo "Eliminate myturb restart files "
    /bin/rm -f my25_turb*nc
    /bin/rm -f radiation.res*nc
    /bin/rm -f physics.res*nc
endif

#**************************************************************************************************
# ================================= Prepare the Run for Execution  ================================
#**************************************************************************************************

cd $workdir

set irun = 1
set numdust = $#dust_scenarios
set dscen = 1

if( $numdust == 0) then
    set dust_scenarios = ( DustScenario_Background.nc )
    echo "No dust scenario chosen, defaulting to background"
endif

while ( $irun <= $num_executions )

    if( $irun > 1 ) then
        set NPZ_RST = 0
    endif

    cp $datadir/$dust_scenarios[$dscen] $workdir/INPUT/dust_cycle.nc
    echo "Copied Dust Scenario $dust_scenarios[$dscen]"

    if (`expr $irun % $numdust` == 0) then
        set dscen = 0
    endif
    @ dscen ++

    set days = $dayslist[$irun]

    set | sort > $envFile
    sleep $envFileDelay
    set -r | sort >> $envFile
    sleep $envFileDelay
    env --unset=TERMCAP | sort >> $envFile

    #------ Convert $days in input into the value set in $dayslist
    $expandVariables $envFile < input.nml.unexpanded > input.nml || exit 1

    rm -f $envFile

    #------ Append external diag table:
    if ($APPEND_EXTERNAL_DIAGTABLE) then
        cat $diagtable_ext >> diag_table
        set APPEND_EXTERNAL_DIAGTABLE = 0
    endif
    #----------------------------------------------------------------------------------------------
    #------ Run the model with mpiexec
    set jobid=`echo $PBS_JOBID | awk -F . '{print $1}'`

    mpiexec -np $npes ./$model_executable:t >& fms_mars_out.$jobid     # error output file

    # mpiexec -np $npes ./$model_executable:t
    if ($status != 0) then
        echo "Error in execution of $cwd/$model_executable:t"
        exit 1
    endif
    #----------------------------------------------------------------------------------------------
    set date_name = `$time_stamp -b -f days`
    set date_name_end = `$time_stamp -e -f days`
    echo 'date_name=' $date_name
    echo 'days=' $days
    foreach outfile (logfile.000000.out time_stamp.out fms_mars_out.* )
        set base = $outfile:r
    end

    #------ Write status reports in ascii
    mv fms_mars_out.$jobid ascii/$date_name.fms_mars.out
    mv time_stamp.out ascii/$date_name.time_stamp.out
    mv logfile.000000.out ascii/$date_name.logfile.out

    #----------------------------------------------------------------------------------------------
    #------ Gather restart files into a single tar file. Move tar file to restart directory for
    #       eventual archival
    cd $workdir/RESTART
    tar -cf restart.tar *.res *.res.nc *.res.nc.0??? *.res.tile?.nc *.res.tile?.nc.0???
    mv restart.tar ../restart/$date_name_end.restart.tar

    #----------------------------------------------------------------------------------------------
    #------ Gather history files into a single tar file. Move tar file to history directory for
    #       eventual archival

    cd $workdir

    tar -cf history.tar *.nc
    mv history.tar ./history/$date_name.nc.tar
    rm -f $date_name*.nc

    #------ Prepare to run the model again: move files in RESTART to INPUT
    cd $workdir
    /bin/rm INPUT/*.res INPUT/*.res.nc INPUT/*.res.nc.0??? INPUT/*.res.tile?.nc INPUT/*.res.tile?.nc.0???
    mv  RESTART/*.res RESTART/*.res.nc RESTART/*.res.nc.0??? RESTART/*.res.tile?.nc RESTART/*.res.tile?.nc.0??? INPUT

    set echo
    #----------------------------------------------------------------------------------------------

    @ irun ++

end

#------ Backup output to Lou (NAS only)
pbs_release_nodes -j $PBS_JOBID -a
ssh -q pfe "ssh -q lou mkdir -p $ASCII_DIR"
ssh -q pfe "ssh -q lou scp -q $workdir/ascii/*  $ASCII_DIR/."
ssh -q pfe "ssh -q lou mkdir -p $RESTART_DIR"
ssh -q pfe "ssh -q lou scp -q $workdir/restart/*.restart.tar  $RESTART_DIR/."
ssh -q pfe "ssh -q lou mkdir -p $HIST_DIR"
ssh -q pfe "ssh -q lou scp -q $workdir/history/*.nc.tar  $HIST_DIR/."
ssh -q pfe "ssh -q lou scp -q $homedir/$name  $ASCII_DIR/."

exit 0
